{"version":3,"sources":["App.tsx","reportWebVitals.tsx","classes/User.ts","classes/Contact.ts","classes/Record.ts","classes/Engagement.ts","utilities/DialerInteractionUtil.js","utilities/RelationshipMapper.ts","index.tsx"],"names":["App","className","color","size","id","cursor","title","src","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","User","five9Username","hubspotUserId","five9UserId","this","Contact","phoneNumber","recordId","Engagement","engagementId","ownerId","type","relationshipMapper","user","contact","engagement","dialerInteractions","interactionApi","window","Five9","CrmSdk","crmApi","defaultSize","width","state","cti","CallingExtensions","debugMode","eventHandlers","onReady","initialized","isLoggedIn","sizeInfo","onDialNumber","data","rawEvent","console","log","JSON","stringify","objectId","setTimeout","outgoingCall","createEngagement","onEngagementCreated","onEndCall","onVisibilityChanged","registerApi","getAdtConfig","params","Promise","resolve","providerName","myCallsTodayEnabled","myChatsTodayEnabled","myEmailsTodayEnabled","showContactInfo","search","crmObjects","label","name","isWho","isWhat","fields","displayName","value","screenPopObject","saveLog","screenPop","getTodayCallsCount","getTodayChatsCount","getTodayEmailsCount","openMyCallsToday","openMyChatsToday","contactSelected","contactModel","enableClickToDial","userLoggedIn","disableClickToDial","_beforeCallFinished","subscribe","callStarted","callFinished","callCompleted","hideWidget","fetch","method","headers","body","status","fromNumber","response","json","catch","error","callAccepted","callAnswered","callRejected","callEnded","subscribeWsEvent","content","userName","userId","document","getElementById","addEventListener","ReactDOM","render","StrictMode","readyState","callback"],"mappings":"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","file":"static/js/main.4fbcdf6c.chunk.js","sourcesContent":["import './App.css';\nimport { X } from 'react-feather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <div className=\"App-body\">\n        <div className=\"Five9-header\">\n          <X color=\"white\" size={20} id=\"exit-five9\" cursor=\"pointer\" />\n        </div>\n        <div className='Panel-body'>\n          <iframe \n            id=\"iframe-api-v2-panel\" \n            title='Five9' \n            src=\"https://app.five9.com/clients/integrations/adt.li.main.html?f9crmapi=true&f9verticalthreshold=300px\"\n            height=\"400px\">\n          </iframe>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry: Function | any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\n\nclass User {\n    \n    five9Username: string;\n    hubspotUserId: string;\n    five9UserId: string;\n\n    constructor() {\n        this.five9Username = '';\n        this.five9UserId = '';\n        this.hubspotUserId = '';\n    }\n\n    \n    \n}\n\nexport default User;","import Record from './Record';\n\nclass Contact extends Record {\n\n    phoneNumber: string;\n\n    constructor() {\n        super();\n        this.phoneNumber = '';\n    }\n}\n\nexport default Contact;","\n\nclass Record {\n\n    recordId: string;\n\n    constructor() {\n        this.recordId = '';\n    }\n\n}\n\nexport default Record;","\n\nclass Engagement {\n\n    engagementId: number;\n    ownerId: string;\n    type: string;\n    recordId: string;\n\n    constructor() {\n        this.engagementId = 0;\n        this.ownerId = '';\n        this.type = '';\n        this.recordId = '';\n    }\n}\n\nexport default Engagement;","import CallingExtensions from \"@hubspot/calling-extensions-sdk\";\nimport RelationshipMapper from './RelationshipMapper';\n\nlet relationshipMapper = new RelationshipMapper();\n\nclass DialerInteractionHandler {\n\n  callback() {\n        const interactionApi = window.Five9.CrmSdk.interactionApi();\n        const crmApi = window.Five9.CrmSdk.crmApi();\n      \n        const defaultSize = {\n          width: 400,\n          height: 600\n        };\n      \n        const state = {};\n      \n        const cti = new CallingExtensions({\n          debugMode: false,\n          eventHandlers: {\n            onReady: () => {\n              cti.initialized({\n                isLoggedIn: true,\n                sizeInfo: defaultSize\n              });\n            },\n            onDialNumber: (data, rawEvent) => {\n              const { phoneNumber } = data;\n              state.phoneNumber = phoneNumber;\n              console.log('HS onDialNumber: ' + JSON.stringify(data));\n              \n              relationshipMapper.user.hubspotUserId = data.ownerId;\n              console.log('HS onDialNumber User: ' + JSON.stringify(relationshipMapper.user));\n\n              relationshipMapper.contact.recordId = data.objectId;\n              relationshipMapper.contact.phoneNumber = data.phoneNumber;\n              console.log('HS onDialNumber Contact: ' + JSON.stringify(relationshipMapper.contact));\n\n              relationshipMapper.engagement.recordId = data.objectId;\n              relationshipMapper.engagement.ownerId = data.ownerId;\n              relationshipMapper.engagement.type = 'CALL';\n              console.log('HS onDialNumber Engagement: ' + JSON.stringify(relationshipMapper.contact));\n\n              window.setTimeout(\n                () =>\n                  cti.outgoingCall({\n                    createEngagement: true,\n                    phoneNumber\n                  }),\n                500\n              );\n            },\n            onEngagementCreated: (data, rawEvent) => {\n              console.log('HS onEngagementCreated: ' + JSON.stringify(data));\n              const { engagementId } = data;\n              state.engagementId = engagementId;\n              relationshipMapper.engagement.engagementId = data.engagementId;\n              console.log('HS onEngagementCreated Engagement: ' + JSON.stringify(relationshipMapper.engagement));\n            },\n            onEndCall: (data) => {\n              console.log('HS onCallEnd: ' + JSON.stringify(data));\n            },\n            onVisibilityChanged: (data, rawEvent) => {\n              console.log('HS onVisibilityChanged: ' + JSON.stringify(data));\n            }\n          }\n        });\n    \n        crmApi.registerApi({\n            getAdtConfig: function (params) {\n                var config = {\n                    providerName: 'Demo CRM ADT adapter',\n                    myCallsTodayEnabled: true,\n                    myChatsTodayEnabled: false,\n                    myEmailsTodayEnabled: false,\n                    showContactInfo: false\n                };\n                return Promise.resolve(config);\n            },\n            search: function (params) {\n              console.log('F9 Search: ' + JSON.stringify(params));\n                var crmObjects = [{id: \"123\", label: \"Contact\", name: \"Joe\", isWho: true, isWhat: false, fields:[{displayName: \"Company\", value: \"ABC\"}]}];\n                return Promise.resolve({crmObjects: crmObjects, screenPopObject: crmObjects[0]}); \n    \n            },\n            saveLog: function (params) {\n              console.log('F9 Save Log: ' + JSON.stringify(params));\n            },\n            screenPop: function (params) {\n              console.log('F9 Screen Pop: ' + JSON.stringify(params));\n            },\n            getTodayCallsCount: function (params) {\n              console.log('F9 Today Call Count: ' + JSON.stringify(params));\n                return Promise.resolve(77);\n            },\n            getTodayChatsCount: function (params) {\n              console.log('F9 Today Chat Count: ' + JSON.stringify(params));\n                return Promise.resolve(77);;\n            },\n            getTodayEmailsCount: function (params) {\n              console.log('F9 Today Email Count: ' + JSON.stringify(params));\n                return Promise.resolve(11);;\n            },\n            openMyCallsToday: function (params) {\n              console.log('F9 Open My Calls Today: ' + JSON.stringify(params));\n            },\n            openMyChatsToday: function (params) {\n              console.log('F9 Open My Chats Today: ' + JSON.stringify(params));\n            },\n            contactSelected: function (params, contactModel) {\n              console.log('F9 Contact Selected: ' + JSON.stringify(params));\n            },\n            enableClickToDial: function (params) {\n              console.log('F9 Enable Click 2 Dial: ' + JSON.stringify(params));\n                cti.initialized({\n                    isLoggedIn: true\n                });\n                cti.userLoggedIn();\n            },\n            disableClickToDial: function (params) {\n              console.log('F9 Disable Click To Dial: ' + JSON.stringify(params));\n            },\n            _beforeCallFinished: function(params) {\n              console.log('F9 Before Call Finished: ' + JSON.stringify(params));\n              }\n        });\n    \n        interactionApi.subscribe({\n            callStarted: function (params) {\n                console.log('F9 Call Started: ' + JSON.stringify(params));\n            },\n    \n            callFinished: function (params) {\n              let engagementId = relationshipMapper.engagement.engagementId;\n              let url = 'https://five9-hubspot-dialer.herokuapp.com/api/engagement/';\n              if (process.env.NODE_ENV !== 'production') {\n                url = '/api/engagement/';\n              }\n              console.log('F9 Call Finished: ' + JSON.stringify(params));\n                cti.callCompleted({\n                    createEngagement: true,\n                    hideWidget: true\n                });\n                \n                fetch(url, {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    engagementId: engagementId,\n                    status: 'COMPLETED',\n                    fromNumber: '(575) 221-0446'\n                  })\n                })\n                .then(response => response.json())\n                .then(data => {\n                  console.log('Success: ', data);\n                })\n                .catch((error) => {\n                  console.error('Error: ', error);\n                });\n            },\n    \n            callAccepted: function (params) {\n              console.log('F9 Call Accepted: ' + JSON.stringify(params));\n                cti.callAnswered();\n            },\n    \n            callRejected: function (params) {\n              console.log('F9 Call Rejected: ' + JSON.stringify(params));\n                cti.callEnded();\n            },\n    \n            callEnded: function (params) {\n              console.log('F9 Call Ended: ' + JSON.stringify(params));\n                cti.callEnded({\n                  createEngagement: true,\n                  status: 'COMPLETED'\n                });\n            }\n        });\n\n        interactionApi.subscribeWsEvent({\n          '10010': (params, content) => {\n            if (content.userName && content.userId) {\n              relationshipMapper.user.five9Username = content.userName;\n              relationshipMapper.user.five9UserId = content.userId;\n            }\n            console.log('From WS New User: ' + JSON.stringify(relationshipMapper.user));\n          }\n        });\n\n    \n          const exit_btn = document.getElementById('exit-five9');\n          exit_btn.addEventListener('click', function () {\n            cti.callCompleted();\n          });\n          \n          /* const handleMessage = (event) => {  \n            if (event.origin !== 'https://app.hubspot.com') {\n              return;\n            }\n            console.log('Message Data = ' + JSON.stringify(event.data));\n          };\n\n          window.addEventListener('message', handleMessage); */\n    }\n    \n}\n\nexport default DialerInteractionHandler;","import User from \"../classes/User\";\nimport Contact from \"../classes/Contact\";\nimport Engagement from \"../classes/Engagement\";\n\nclass RelationshipMapper {\n\n    user: User;\n    contact: Contact;\n    engagement: Engagement;\n\n    constructor() {\n        this.user = new User();\n        this.contact = new Contact();\n        this.engagement = new Engagement();\n    }\n\n}\n\nexport default RelationshipMapper;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport DialerInteractionHandler from './utilities/DialerInteractionUtil';\n\nlet dialerInteractions = new DialerInteractionHandler();\n\nconst callback = () => {\n  if (\n    document.readyState === \"interactive\" ||\n    document.readyState === \"complete\"\n  ) {\n    window.setTimeout(() => dialerInteractions.callback(), 1000);\n  } else {\n    document.addEventListener(\"DOMContentLoaded\", dialerInteractions.callback);\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n  callback\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(null);\n"],"sourceRoot":""}